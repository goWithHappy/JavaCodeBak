package core;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import utils.JDBCUtils;

/**
 * 负责查询（对外提供服务的核心类）
 * @author Admain
 *
 */
@SuppressWarnings("all")
public abstract class Query {
	/**
	 * 执行一个DML语句
	 * @param sql
	 * @param params
	 * @return 执行sql语句之后影响的行数
	 */
	public int executeDML(String sql, Object[] params) {
		Connection conn=DBManager.getConnection();
		int count=0;
		PreparedStatement ps=null;
		try {
			ps=conn.prepareStatement(sql);
			System.out.println(ps);
			//给sql设置参数
			JDBCUtils.hanlerParams(ps, params);
			count=ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	/**
	 * 将一个对象存储到数据库中
	 * @param object 要存储的对象
	 */
	public void insert(Object object);
	/**
	 * 删除clazz表示类对应的表中记录（指定主键值id的记录）
	 * @param clazz 根表对应的class对象
	 * @param id
	 */
	public void delete(Class clazz,Object id); //delete from user where id=?
	/**
	 * 删除对象在数据库中的记录（对象所在的类，对象的主键的值对应的记录）
	 * @param obj
	 */
	public void delete(Object obj);
	/**
	 * 更新对象指定的记录，并且只更新指定字段的值
	 * @param obj
	 * @param fileName
	 * @return
	 */
	public int update(Object obj,String[] fileName);//update user set uname=?,pwd=?
	/**
	 * 查询返回的多行记录，并将每行记录封装到clazz指定的类中
	 * @param sql 查询语句
	 * @param clazz 封装数据的javabean的Class对象
	 * @param params sql参数
	 * @return 查询到的结果集
	 */
	public List queryRows(String sql,Class clazz,Object[] params);
	/**
	 * 查询返回一行一列
	 * @param sql 查询语句
	 * @param params sql参数
	 * @return 查询到的结果
	 */
	public Object queryUniqueRow(String sql,Class clazz,Object[] params);
	/**
	 * 查询返回一行一列的value值（已经确定查询结果是一行）
	 * @param sql
	 * @param params
	 * @return
	 */
	public Object queryValue(String sql,Object[] params);
	/**
	 * 查询返回一行一列
	 * @param sql 查询语句
	 * @param params sql参数
	 * @return 查询到的数字
	 */
	public Number queryNumber(String sql,Object[] params);
}

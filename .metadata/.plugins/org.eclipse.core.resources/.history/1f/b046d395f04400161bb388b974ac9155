package core;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import beans.ColumnInfo;
import beans.TableInfo;
import utils.JDBCUtils;
import utils.ReflectUtils;

/**
 * 负责查询（对外提供服务的核心类）
 * @author Admain
 *
 */
@SuppressWarnings("all")
public abstract class Query implements Cloneable{
	/**
	 * 定义了一个用于查询的模本,便于以后的重用
	 * @param sql语句
	 * @param params sql的参数
	 * @param clazz	记录封装的java类
	 * @param back Callback，实现回调
	 * @return
	 */
	public Object executeQueryTempt(String sql,Object[] params,Class clazz,CallBack back){
		Connection conn=DBManager.getConnection();
		List list=null; //存储查询结果的容器
		PreparedStatement ps=null;
		ResultSet rs=null;
		try {
			ps=conn.prepareStatement(sql);
			//给sql设置参数
			if(params!=null){
			JDBCUtils.hanlerParams(ps, params);
			}
			rs=ps.executeQuery();
			return back.doExecute(conn, ps, rs);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	
	}
	/**
	 * 执行一个DML语句
	 * @param sql
	 * @param params
	 * @return 执行sql语句之后影响的行数
	 */
	public int executeDML(String sql, Object[] params) {
		Connection conn=DBManager.getConnection();
		int count=0;
		PreparedStatement ps=null;
		try {
			ps=conn.prepareStatement(sql);
			System.out.println(ps);
			//给sql设置参数
			JDBCUtils.hanlerParams(ps, params);
			count=ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	/**
	 * 将一个对象存储到数据库中
	 * @param object 要存储的对象
	 */
	public void insert(Object obj) {
		//obj->insert into emp values(？，？，？)
		Class c=obj.getClass();
		List<Object> params=new ArrayList<>();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		
		StringBuilder sql=new StringBuilder("insert into "+tableInfo.getTname()+" (");
		
		//获得属性的名称
		Field[] fs=c.getDeclaredFields();
		int countNotNUll=0;
		for(Field f:fs){
			String fieldName=f.getName();
			Object fieldValue=ReflectUtils.invokeGet(fieldName, obj);
			
			//直插入非空的属性
			if(fieldValue!=null){
				sql.append(fieldName+",");
				countNotNUll++;
				params.add(fieldValue);
			}
		}
		sql.setCharAt(sql.length()-1, ')');
		sql.append(" values(");
		for(int i=0;i<countNotNUll;i++){
			sql.append("?,");
		}
			sql.setCharAt(sql.length()-1, ')');
			
			executeDML(sql.toString(), params.toArray());
	}
	/**
	 * 删除clazz表示类对应的表中记录（指定主键值id的记录）
	 * @param clazz 根表对应的class对象
	 * @param id
	 */
	public void delete(Class clazz, Object id) {
		// Emp.class,2-->delete from emp where id=2;
		//通过Class对象找TableInfo
		TableInfo tableInfo=TableContext.poClassTableMap.get(clazz);
		ColumnInfo onlyPrimkey=tableInfo.getOnlyPriKey();
		
		//获得对应的sql语句
		String sql="delete from "+tableInfo.getTname()+" where "+onlyPrimkey.getName()+"=?";
		executeDML(sql, new Object[]{id});
	}
	/**
	 * 删除对象在数据库中的记录（对象所在的类，对象的主键的值对应的记录）
	 * @param obj
	 */
	public void delete(Object obj) {
		// Obj->delete from emp where id=2;
		Class c=obj.getClass();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		ColumnInfo onlyPrimaryKey=tableInfo.getOnlyPriKey();
		
		//通过反射机制，调用响应set和get方法
		Object priKeyValue=ReflectUtils.invokeGet(onlyPrimaryKey.getName(), obj);
		//调用其重载方法来进行删除
		delete(c,priKeyValue);
		
	}
	/**
	 * 更新对象指定的记录，并且只更新指定字段的值
	 * @param obj
	 * @param fileName
	 * @return
	 */
	public int update(Object obj, String[] fileName) {
		//object {"uname","pwd"}-->update tname set username=?,=wd=? where id=?
		Class c=obj.getClass();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		List<Object> params=new ArrayList<>();
		ColumnInfo onlyPrimaryKey=tableInfo.getOnlyPriKey();
		StringBuilder sql=new  StringBuilder("update "+tableInfo.getTname()+" set ");
		
		for(String fname:fileName){
			//得到value值
			Object fvaue=ReflectUtils.invokeGet(fname, obj);
			params.add(fvaue);
			sql.append(fname+"=?,");
		}
		sql.setCharAt(sql.length()-1, ' ');
		sql.append(" where ");
		sql.append(onlyPrimaryKey.getName()+"=? ");
		//将id属性进行替换
		params.add(ReflectUtils.invokeGet(onlyPrimaryKey.getName(), obj));
		return executeDML(sql.toString(), params.toArray()); 
	}
	/**
	 * 查询返回的多行记录，并将每行记录封装到clazz指定的类中
	 * @param sql 查询语句
	 * @param clazz 封装数据的javabean的Class对象
	 * @param params sql参数
	 * @return 查询到的结果集
	 */
	public List queryRows(String sql, final Class clazz, Object[] params) {
		return (List) executeQueryTempt(sql, params, clazz, new CallBack() {
			
			@Override
			public Object doExecute(Connection conn, PreparedStatement ps, ResultSet rs) {
				List list=null;
				try {
					ResultSetMetaData rsmd=rs.getMetaData();
					//多行
					while(rs.next()){
						if(list==null){
							list=new ArrayList();
						}
						Object rowObj=clazz.newInstance();  //调用javaBean的无参构造器
						//多列
						for(int i=0;i<rsmd.getColumnCount();i++){
							String columnName=rsmd.getColumnLabel(i+1);
							Object columnValue=rs.getObject(i+1);
							//通过反射来调用set方法来进行属性的设置
							ReflectUtils.invokeSet(rowObj, columnName, columnValue);
						}
						list.add(rowObj);
					}
				} catch (InstantiationException | IllegalAccessException | SQLException e) {
					e.printStackTrace();
				}
				return list;
			}
		});
	}
	/**
	 * 查询返回一行一列
	 * @param sql 查询语句
	 * @param params sql参数
	 * @return 查询到的结果
	 */
	public Object queryUniqueRow(String sql, Class clazz,Object[] params) {
		List list=queryRows(sql, clazz, params);
		//如果不为空切查询结果大于1则返回第一行
		return (list!=null&&list.size()>0)?list.get(0):null;
	}
	/**
	 * 查询返回一行一列的value值（已经确定查询结果是一行）
	 * @param sql
	 * @param params
	 * @return
	 */
	public Number queryNumber(String sql, Object[] params) {
		return (Number)queryValue(sql, params);
	}
	/**
	 * 查询返回一行一列
	 * @param sql 查询语句
	 * @param params sql参数
	 * @return 查询到的数字
	 */
	public Object queryValue(String sql, Object[] params) {
		Connection conn=DBManager.getConnection();
		Object value=null; //查询的唯一结果值
		PreparedStatement ps=null;
		ResultSet rs=null;
		try {
			ps=conn.prepareStatement(sql);
			//给sql设置参数
			JDBCUtils.hanlerParams(ps, params);
			rs=ps.executeQuery();
			ResultSetMetaData rsmd=rs.getMetaData();
			//多行
			while(rs.next()){
				value=rs.getObject(1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		return value;
	}
	/**
	 * 通过主键来进行结果的查询
	 * @param clazz
	 * @param obj
	 * @return
	 */
	public Object queryById(Class clazz,Object obj){
		TableInfo tableInfo=TableContext.poClassTableMap.get(clazz);
		//获取主键
		ColumnInfo onlyPrikey=tableInfo.getOnlyPriKey();
		String sql="select * from "+tableInfo.getTname()+" where "+onlyPrikey.getName()+"=? ";
		return queryUniqueRow(sql, clazz, new Object[]{"id"});
	}
	/**
	 * 分页查询
	 * @param 查询页数
	 * @param 每页显示的记录条数
	 * @return
	 */
	public abstract Object queryPagenate(int pageNum,int size);
	
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
}

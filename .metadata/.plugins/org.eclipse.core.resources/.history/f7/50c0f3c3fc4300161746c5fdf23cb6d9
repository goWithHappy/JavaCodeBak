package core;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import beans.ColumnInfo;
import beans.TableInfo;
import po.Emp;
import utils.JDBCUtils;
import utils.ReflectUtils;
import utils.StringUtils;

/**
 * 针对mysql数据库的查询
 * @author Admain
 *
 */
public class MysqlQuery implements Query{

	@Override
	public int executeDML(String sql, Object[] params) {
		Connection conn=DBManager.getConnection();
		int count=0;
		PreparedStatement ps=null;
		try {
			ps=conn.prepareStatement(sql);
			System.out.println(ps);
			//给sql设置参数
			JDBCUtils.hanlerParams(ps, params);
			count=ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public void insert(Object obj) {
		//obj->insert into emp values(？，？，？)
		Class c=obj.getClass();
		List<Object> params=new ArrayList<>();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		
		StringBuilder sql=new StringBuilder("insert into "+tableInfo.getTname()+" (");
		
		//获得属性的名称
		Field[] fs=c.getDeclaredFields();
		int countNotNUll=0;
		for(Field f:fs){
			String fieldName=f.getName();
			Object fieldValue=ReflectUtils.invokeGet(fieldName, obj);
			
			//直插入非空的属性
			if(fieldValue!=null){
				sql.append(fieldName+",");
				countNotNUll++;
				params.add(fieldValue);
			}
		}
		sql.setCharAt(sql.length()-1, ')');
		sql.append(" values(");
		for(int i=0;i<countNotNUll;i++){
			sql.append("?,");
		}
			sql.setCharAt(sql.length()-1, ')');
			
			executeDML(sql.toString(), params.toArray());
	}

	@Override
	public void delete(Class clazz, Object id) {
		// Emp.class,2-->delete from emp where id=2;
		//通过Class对象找TableInfo
		TableInfo tableInfo=TableContext.poClassTableMap.get(clazz);
		ColumnInfo onlyPrimkey=tableInfo.getOnlyPriKey();
		
		//获得对应的sql语句
		String sql="delete from "+tableInfo.getTname()+" where "+onlyPrimkey.getName()+"=?";
		executeDML(sql, new Object[]{id});
	}

	@Override
	public void delete(Object obj) {
		// Obj->delete from emp where id=2;
		Class c=obj.getClass();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		ColumnInfo onlyPrimaryKey=tableInfo.getOnlyPriKey();
		
		//通过反射机制，调用响应set和get方法
		Object priKeyValue=ReflectUtils.invokeGet(onlyPrimaryKey.getName(), obj);
		//调用其重载方法来进行删除
		delete(c,priKeyValue);
		
	}

	@Override
	public int update(Object obj, String[] fileName) {
		//object {"uname","pwd"}-->update tname set username=?,=wd=? where id=?
		Class c=obj.getClass();
		TableInfo tableInfo=TableContext.poClassTableMap.get(c);
		List<Object> params=new ArrayList<>();
		ColumnInfo onlyPrimaryKey=tableInfo.getOnlyPriKey();
		StringBuilder sql=new  StringBuilder("update "+tableInfo.getTname()+" set ");
		
		for(String fname:fileName){
			//得到value值
			Object fvaue=ReflectUtils.invokeGet(fname, obj);
			params.add(fvaue);
			sql.append(fname+"=?,");
		}
		sql.setCharAt(sql.length()-1, ' ');
		sql.append(" where ");
		sql.append(onlyPrimaryKey.getName()+"=? ");
		//将id属性进行替换
		params.add(ReflectUtils.invokeGet(onlyPrimaryKey.getName(), obj));
		return executeDML(sql.toString(), params.toArray()); 
	}

	@Override
	public List queryRows(String sql, Class clazz, Object[] params) {
		Connection conn=DBManager.getConnection();
		List list=null; //存储查询结果的容器
		PreparedStatement ps=null;
		ResultSet rs=null;
		
		try {
			ps=conn.prepareStatement(sql);
			//给sql设置参数
			JDBCUtils.hanlerParams(ps, params);
			System.out.println(ps);
			rs=ps.executeQuery();
			ResultSetMetaData rsmd=rs.getMetaData();
			
			//多行
			while(rs.next()){
				if(list==null){
					list=new ArrayList();
				}
				Object rowObj=clazz.newInstance();  //调用javaBean的无参构造器
				//多列
				for(int i=0;i<rsmd.getColumnCount();i++){
					String columnName=rsmd.getColumnLabel(i+1);
					Object columnValue=rs.getObject(i+1);
					//通过反射来调用set方法来进行属性的设置
					ReflectUtils.invokeSet(clazz, columnName, columnValue);
				}
				list.add(rowObj);
			}
		} catch (SQLException | InstantiationException | IllegalAccessException e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public Object queryUniqueRow(String sql, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Number queryNumber(String sql, Object[] params) {
		// TODO Auto-generated method stub
		return null;
	}
	public static void main(String[] args) {
		Emp e=new Emp();
//		e.setId(4);
//		new MysqlQuery().delete(e);
		//insert
//		e.setAge(12);
//		e.setBirthday(new java.sql.Date(System.currentTimeMillis()));
//		e.setEmpname("张三");
//		e.setSalary((double) 1000);
//		new MysqlQuery().insert(e);
		//update
		e.setAge(22);
		e.setId(1);
		new MysqlQuery().update(e, new String[]{"age"});
	}
}
